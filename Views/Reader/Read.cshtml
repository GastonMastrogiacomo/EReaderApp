@model EReaderApp.Models.Book
@{
    ViewData["Title"] = "Reading: " + Model.Title;
    Layout = "_ReaderLayout"; // Optional: Use a special layout for the reader
}

<div class="reader-container">
    <div class="reader-header bg-light p-3 mb-2 border-bottom">
        <div class="d-flex justify-content-between align-items-center">
            <h3>@Model.Title</h3>
            <div>
                <a href="@Url.Action("Index", "Home")" class="btn btn-outline-secondary btn-sm">
                    <i class="fas fa-arrow-left"></i> Back to Home
                </a>
            </div>
        </div>
        <p class="text-muted mb-0">by @Model.Author</p>
    </div>

    <div class="reader-controls bg-light p-2 mb-3 rounded">
        <div class="btn-toolbar" role="toolbar">
            <div class="btn-group me-2" role="group">
                <button id="zoom-out" class="btn btn-sm btn-outline-secondary"><i class="fas fa-search-minus"></i></button>
                <button id="zoom-in" class="btn btn-sm btn-outline-secondary"><i class="fas fa-search-plus"></i></button>
            </div>
            <div class="btn-group me-2" role="group">
                <button id="prev-page" class="btn btn-sm btn-outline-secondary"><i class="fas fa-chevron-left"></i> Previous</button>
                <span class="btn btn-sm btn-outline-secondary disabled">
                    Page <span id="page-num">0</span> / <span id="page-count">0</span>
                </span>
                <button id="next-page" class="btn btn-sm btn-outline-secondary">Next <i class="fas fa-chevron-right"></i></button>
            </div>
            <div class="btn-group" role="group">
                <button id="toggle-dark-mode" class="btn btn-sm btn-outline-secondary"><i class="fas fa-moon"></i></button>
                <button id="toggle-fullscreen" class="btn btn-sm btn-outline-secondary"><i class="fas fa-expand"></i></button>
            </div>
        </div>
    </div>

    <div id="pdf-container" class="pdf-container border rounded">
        <canvas id="pdf-renderer"></canvas>
    </div>
</div>

@section Styles {
    <style>
        /* Reader-specific styles */
        .reader-container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .pdf-container {
            background-color: #f5f5f5;
            height: 800px;
            overflow: auto;
            display: flex;
            justify-content: center;
            position: relative;
        }

        #pdf-renderer {
            max-width: 100%;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }

        /* Dark mode */
        .dark-mode .pdf-container {
            background-color: #333;
        }

        .dark-mode #pdf-renderer {
            filter: invert(0.9) hue-rotate(180deg);
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js"></script>
    <script>
        // Set up PDF.js worker
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.worker.min.js';

        // PDF viewing globals
        let pdfDoc = null;
        let pageNum = 1;
        let pageRendering = false;
        let pageNumPending = null;
        const minScale = 0.5;
        const maxScale = 2.0;
        let scale = 1.0;
        let canvas = document.getElementById('pdf-renderer');
        let ctx = canvas.getContext('2d');

        // Load the PDF
        const loadPDF = async () => {
            const pdfPath = '@Model.PdfPath';
            try {
                pdfDoc = await pdfjsLib.getDocument(pdfPath).promise;
                document.getElementById('page-count').textContent = pdfDoc.numPages;

                // Initial page render
                renderPage(pageNum);
            } catch (error) {
                console.error('Error loading PDF:', error);
                alert('Failed to load the PDF. Please try again later.');
            }
        };

        // Render the page
        const renderPage = (num) => {
            pageRendering = true;

            // Update UI
            document.getElementById('page-num').textContent = num;

            // Get page
            pdfDoc.getPage(num).then(function (page) {
                // Calculate the optimal viewport based on container width
                const container = document.getElementById('pdf-container');
                const containerWidth = container.clientWidth;
                const viewport = page.getViewport({
                    scale: containerWidth / page.getViewport({ scale: 1.0 }).width
                });

                // Apply additional zoom
                const scaledViewport = page.getViewport({
                    scale: viewport.scale * scale
                });

                // Set canvas dimensions
                canvas.height = scaledViewport.height;
                canvas.width = scaledViewport.width;

                // Render PDF page into canvas context
                const renderContext = {
                    canvasContext: ctx,
                    viewport: scaledViewport
                };

                const renderTask = page.render(renderContext);

                // Wait for rendering to finish
                renderTask.promise.then(function () {
                    pageRendering = false;
                    if (pageNumPending !== null) {
                        // New page rendering is pending
                        renderPage(pageNumPending);
                        pageNumPending = null;
                    }
                });
            });
        };

        // Previous page
        const previousPage = () => {
            if (pageNum <= 1) return;
            pageNum--;
            queueRenderPage(pageNum);
        };

        // Next page
        const nextPage = () => {
            if (pageNum >= pdfDoc.numPages) return;
            pageNum++;
            queueRenderPage(pageNum);
        };

        // Queue the page rendering
        const queueRenderPage = (num) => {
            if (pageRendering) {
                pageNumPending = num;
            } else {
                renderPage(num);
            }
        };

        // Zoom in
        const zoomIn = () => {
            if (scale >= 2.0) return; // Prevent excessive zooming
            scale += 0.2;
            queueRenderPage(pageNum);
        };

        const zoomOut = () => {
            if (scale <= 0.5) return; // Prevent too small scaling
            scale -= 0.2;
            queueRenderPage(pageNum);
        };

        // Toggle dark mode
        const toggleDarkMode = () => {
            document.querySelector('.reader-container').classList.toggle('dark-mode');
        };

        // Toggle fullscreen
        const toggleFullscreen = () => {
            const container = document.querySelector('.pdf-container');

            if (!document.fullscreenElement) {
                container.requestFullscreen().catch(err => {
                    console.error(`Error attempting to enable fullscreen: ${err.message}`);
                });
            } else {
                document.exitFullscreen();
            }
        };

        // Add event listeners
        document.getElementById('prev-page').addEventListener('click', previousPage);
        document.getElementById('next-page').addEventListener('click', nextPage);
        document.getElementById('zoom-in').addEventListener('click', zoomIn);
        document.getElementById('zoom-out').addEventListener('click', zoomOut);
        document.getElementById('toggle-dark-mode').addEventListener('click', toggleDarkMode);
        document.getElementById('toggle-fullscreen').addEventListener('click', toggleFullscreen);

        // Handle keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
                previousPage();
            } else if (e.key === 'ArrowRight') {
                nextPage();
            }
        });

        // Initialize when the document is ready
        document.addEventListener('DOMContentLoaded', loadPDF);
    </script>
}