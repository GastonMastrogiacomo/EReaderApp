@model IEnumerable<EReaderApp.Models.Book>
@{
    ViewData["Title"] = ViewBag.Library.ListName;
    var library = ViewBag.Library as EReaderApp.Models.Library;
}

<div class="container py-4">
    <!-- Header Section with Library Info -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="mb-0">@library.ListName</h1>
            <p class="text-muted">@Model.Count() book@(Model.Count() != 1 ? "s" : "")</p>
        </div>
        <div class="d-flex gap-2">
            <a asp-controller="Libraries" asp-action="MyLibraries" class="btn btn-outline-primary">
                <i class="fas fa-arrow-left me-2"></i>Back to My Libraries
            </a>
            <button class="btn btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#filterOptions" aria-expanded="false">
                <i class="fas fa-filter me-2"></i>Filter
            </button>
        </div>
    </div>

    <!-- Filter & Search Options (Collapsed by default) -->
    <div class="collapse mb-4" id="filterOptions">
        <div class="card card-body border-0 shadow-sm">
            <form id="filterForm" method="get" class="row g-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text bg-white border-end-0">
                            <i class="fas fa-search text-muted"></i>
                        </span>
                        <input type="text" class="form-control border-start-0" id="searchTerm" name="searchTerm" placeholder="Search by title or author">
                    </div>
                </div>
                <div class="col-md-3">
                    @{
                        var sortOptions = new List<SelectListItem>
                    {
                    new SelectListItem { Value = "", Text = "Sort by...", Selected = true },
                    new SelectListItem { Value = "title", Text = "Sort by Title", Selected = false },
                    new SelectListItem { Value = "author", Text = "Sort by Author", Selected = false },
                    new SelectListItem { Value = "rating", Text = "Sort by Rating", Selected = false }
                    };
                    }
                    @Html.DropDownList("sortOption", sortOptions, new { @class = "form-select", id = "sortOption" })
                </div>
                <div class="col-md-3">
                    <button type="button" class="btn btn-outline-danger w-100" id="clearFilters">
                        <i class="fas fa-times me-2"></i>Clear Filters
                    </button>
                </div>
            </form>
        </div>
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info shadow-sm border-0">
            <i class="fas fa-info-circle me-2"></i> This library is empty. Browse <a asp-controller="Books" asp-action="Search">books</a> to add to this library.
        </div>
    }
    else
    {
        <!-- Results Summary and View Toggle -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                <span class="text-muted" id="results-count">
                    Showing @Model.Count() book@(Model.Count() != 1 ? "s" : "") in this library
                </span>
            </div>
            <div>
                <div class="btn-group shadow-sm" role="group">
                    <button type="button" class="btn btn-outline-secondary btn-sm active" id="grid-view-btn" title="Grid View">
                        <i class="fas fa-th-large"></i>
                    </button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="list-view-btn" title="List View">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Book Grid View (default) -->
        <div id="grid-view" class="row row-cols-2 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 g-4">
            @foreach (var book in Model)
            {
                <div class="col book-item"
                     data-title="@book.Title.ToLower()"
                     data-author="@book.Author.ToLower()"
                     data-rating="@book.Score">
                    <div class="card h-100 shadow-sm border-0 hover-elevate book-card overflow-hidden">
                        <div class="position-relative">
                            <a href="@Url.Action("ViewDetails", "Books", new { id = book.IdBook })" class="text-decoration-none">
                                <div class="book-cover-container">
                                    @if (!string.IsNullOrEmpty(book.ImageLink))
                                    {
                                        <div class="book-cover" style="background-image: url('@book.ImageLink');"></div>
                                    }
                                    else
                                    {
                                        <div class="default-cover">
                                            <i class="fas fa-book text-secondary fa-3x mb-2"></i>
                                            <span class="small text-truncate w-100 px-2">@book.Title</span>
                                        </div>
                                    }
                                </div>
                            </a>

                            @if (book.Score > 0)
                            {
                                <div class="book-score">
                                    <i class="fas fa-star me-1"></i> @string.Format("{0:0.0}", book.Score)
                                </div>
                            }
                        </div>

                        <div class="card-body p-3 d-flex flex-column">
                            <h5 class="card-title fw-bold text-truncate" title="@book.Title">@book.Title</h5>
                            <p class="card-text text-muted small text-truncate mb-3" title="@book.Author">@book.Author</p>

                            <div class="mt-auto d-flex gap-2">
                                <a href="@Url.Action("Read", "Reader", new { id = book.IdBook })" class="btn btn-primary btn-sm flex-grow-1">
                                    <i class="fas fa-book-open me-1"></i> Read
                                </a>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end shadow-sm border-0">
                                        <li>
                                            <a class="dropdown-item" href="@Url.Action("ViewDetails", "Books", new { id = book.IdBook })">
                                                <i class="fas fa-info-circle me-2 text-primary"></i> Details
                                            </a>
                                        </li>
                                        <li>
                                            <form asp-controller="Libraries" asp-action="RemoveFromLibrary" method="post">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="bookId" value="@book.IdBook" />
                                                <input type="hidden" name="libraryId" value="@library.IdLibrary" />
                                                <button type="submit" class="dropdown-item text-danger"
                                                        onclick="return confirm('Are you sure you want to remove this book from your library?')">
                                                    <i class="fas fa-trash me-2"></i> Remove
                                                </button>
                                            </form>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Book List View (hidden by default) -->
        <div id="list-view" class="d-none">
            <div class="list-group">
                @foreach (var book in Model)
                {
                    <div class="list-group-item list-group-item-action p-3 border-0 shadow-sm mb-3 rounded hover-elevate book-item"
                         data-title="@book.Title.ToLower()"
                         data-author="@book.Author.ToLower()"
                         data-rating="@book.Score">
                        <div class="row align-items-center">
                            <div class="col-md-1 col-3">
                                <div class="position-relative list-book-cover">
                                    @if (!string.IsNullOrEmpty(book.ImageLink))
                                    {
                                        <div class="list-cover" style="background-image: url('@book.ImageLink');"></div>
                                    }
                                    else
                                    {
                                        <div class="default-list-cover">
                                            <i class="fas fa-book text-secondary"></i>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col-md-9 col-9">
                                <h5 class="mb-1 fw-bold">@book.Title</h5>
                                <p class="mb-1 text-muted">@book.Author</p>
                                <div class="d-flex align-items-center">
                                    @if (book.Score > 0)
                                    {
                                        <span class="badge bg-warning text-dark me-2">
                                            <i class="fas fa-star me-1"></i> @string.Format("{0:0.0}", book.Score)
                                        </span>
                                    }

                                    @if (book.PageCount.HasValue)
                                    {
                                        <small class="text-muted me-2"><i class="fas fa-file me-1"></i> @book.PageCount pages</small>
                                    }
                                </div>
                            </div>
                            <div class="col-md-2 col-12 mt-3 mt-md-0">
                                <div class="d-flex gap-2 justify-content-md-end">
                                    <a href="@Url.Action("Read", "Reader", new { id = book.IdBook })" class="btn btn-sm btn-primary flex-grow-1 flex-md-grow-0">
                                        <i class="fas fa-book-open me-1"></i> Read
                                    </a>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end shadow-sm border-0">
                                            <li>
                                                <a class="dropdown-item" href="@Url.Action("ViewDetails", "Books", new { id = book.IdBook })">
                                                    <i class="fas fa-info-circle me-2 text-primary"></i> Details
                                                </a>
                                            </li>
                                            <li>
                                                <form asp-controller="Libraries" asp-action="RemoveFromLibrary" method="post">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="bookId" value="@book.IdBook" />
                                                    <input type="hidden" name="libraryId" value="@library.IdLibrary" />
                                                    <button type="submit" class="dropdown-item text-danger"
                                                            onclick="return confirm('Are you sure you want to remove this book from your library?')">
                                                        <i class="fas fa-trash me-2"></i> Remove
                                                    </button>
                                                </form>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- "No results" message (hidden by default) -->
        <div id="no-results" class="alert alert-info shadow-sm border-0 mt-4 d-none">
            <i class="fas fa-search me-2"></i> No books match your search criteria. Try adjusting your filters.
        </div>
    }
</div>

<style>
    /* Card hover effects */
    .hover-elevate {
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .hover-elevate:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
        }

    /* Book cover styling for grid view */
    .book-cover-container {
        height: 220px;
        overflow: hidden;
        position: relative;
    }

    .book-cover {
        height: 100%;
        width: 100%;
        background-position: center;
        background-size: cover;
        background-repeat: no-repeat;
        transition: transform 0.3s ease;
    }

    .book-card:hover .book-cover {
        transform: scale(1.05);
    }

    .default-cover {
        height: 100%;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background-color: #f8f9fa;
        color: #6c757d;
        padding: 1rem;
        text-align: center;
    }

    /* Book cover styling for list view */
    .list-book-cover {
        height: 80px;
        width: 60px;
        overflow: hidden;
        border-radius: 4px;
    }

    .list-cover {
        height: 100%;
        width: 100%;
        background-position: center;
        background-size: cover;
        background-repeat: no-repeat;
    }

    .default-list-cover {
        height: 100%;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f8f9fa;
        border-radius: 4px;
    }

    /* Rating badge */
    .book-score {
        position: absolute;
        top: 8px;
        right: 8px;
        background-color: #ffc107;
        color: #212529;
        padding: 0.25rem 0.5rem;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.8rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    /* Button styling */
    .btn-primary {
        background-color: var(--primary-color, #0d6efd);
        border-color: var(--primary-color, #0d6efd);
    }

        .btn-primary:hover {
            background-color: var(--primary-color-dark, #0b5ed7);
            border-color: var(--primary-color-dark, #0b5ed7);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

    .btn-outline-secondary:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    /* Card styling */
    .book-card {
        border-radius: 8px;
    }

    /* Consistent transitions */
    .card, .btn, .form-control, .input-group, .list-group-item {
        transition: all 0.2s ease-in-out;
    }

</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // View toggle functionality
            const gridViewBtn = document.getElementById('grid-view-btn');
            const listViewBtn = document.getElementById('list-view-btn');
            const gridView = document.getElementById('grid-view');
            const listView = document.getElementById('list-view');
            const noResults = document.getElementById('no-results');
            const resultsCount = document.getElementById('results-count');

            // Load view preference from localStorage
            const savedView = localStorage.getItem('library-view-mode');
            if (savedView === 'list') {
                // Default to list view
                gridView.classList.add('d-none');
                listView.classList.remove('d-none');
                listViewBtn.classList.add('active');
                gridViewBtn.classList.remove('active');
            } else {
                // Default to grid view
                gridView.classList.remove('d-none');
                listView.classList.add('d-none');
                gridViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
                localStorage.setItem('library-view-mode', 'grid');
            }

            // Toggle to grid view
            if (gridViewBtn) {
                gridViewBtn.addEventListener('click', function() {
                    gridView.classList.remove('d-none');
                    listView.classList.add('d-none');
                    gridViewBtn.classList.add('active');
                    listViewBtn.classList.remove('active');
                    localStorage.setItem('library-view-mode', 'grid');
                });
            }

            // Toggle to list view
            if (listViewBtn) {
                listViewBtn.addEventListener('click', function() {
                    gridView.classList.add('d-none');
                    listView.classList.remove('d-none');
                    listViewBtn.classList.add('active');
                    gridViewBtn.classList.remove('active');
                    localStorage.setItem('library-view-mode', 'list');
                });
            }

            // Filter & sorting functionality
            const filterForm = document.getElementById('filterForm');
            const clearFiltersBtn = document.getElementById('clearFilters');
            const searchTermInput = document.getElementById('searchTerm');
            const sortOptionSelect = document.getElementById('sortOption');

            // Function to filter and sort books
            function filterAndSortBooks() {
                const searchTerm = searchTermInput.value.toLowerCase().trim();
                const sortOption = sortOptionSelect.value;

                // Get all book items
                const bookItems = document.querySelectorAll('.book-item');
                let visibleCount = 0;

                // Filter books
                bookItems.forEach(item => {
                    const title = item.getAttribute('data-title');
                    const author = item.getAttribute('data-author');

                    // Apply search filter
                    let visible = true;
                    if (searchTerm) {
                        visible = title.includes(searchTerm) || author.includes(searchTerm);
                    }

                    // Show/hide based on filter result
                    if (visible) {
                        item.style.display = '';
                        visibleCount++;
                    } else {
                        item.style.display = 'none';
                    }
                });

                // Update the count display and toggle "no results" message
                resultsCount.textContent = `Showing ${visibleCount} book${visibleCount !== 1 ? 's' : ''} in this library`;

                if (visibleCount === 0) {
                    noResults.classList.remove('d-none');
                } else {
                    noResults.classList.add('d-none');
                }

                // Apply sorting based on updated format (matching Search view)
                if (sortOption) {
                    // Determine which view is currently active
                    const isListView = !listView.classList.contains('d-none');

                    // Select the appropriate container and items based on current view
                    const container = isListView ? listView.querySelector('.list-group') : gridView;
                    const items = Array.from(isListView ?
                        listView.querySelectorAll('.book-item') :
                        gridView.querySelectorAll('.book-item'))
                        .filter(item => item.style.display !== 'none');

                    // Sort items based on new format (matching Search view)
                    items.sort((a, b) => {
                        const titleA = a.getAttribute('data-title');
                        const titleB = b.getAttribute('data-title');
                        const authorA = a.getAttribute('data-author');
                        const authorB = b.getAttribute('data-author');
                        const ratingA = parseFloat(a.getAttribute('data-rating') || 0);
                        const ratingB = parseFloat(b.getAttribute('data-rating') || 0);

                        switch (sortOption) {
                            case 'title':
                                return titleA.localeCompare(titleB);
                            case 'author':
                                return authorA.localeCompare(authorB);
                            case 'rating':
                                // Sort by rating descending (highest first)
                                return ratingB - ratingA;
                            default:
                                return 0;
                        }
                    });

                    // Remove all items from DOM and re-add in sorted order
                    items.forEach(item => container.appendChild(item));
                }
            }

            // Attach event listeners
            if (filterForm) {
                // Filter as user types
                searchTermInput.addEventListener('input', filterAndSortBooks);

                // Sort when option changes
                sortOptionSelect.addEventListener('change', filterAndSortBooks);

                // Handle form submission
                filterForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    filterAndSortBooks();
                });
            }

            if (clearFiltersBtn) {
                clearFiltersBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    // Clear filters
                    searchTermInput.value = '';
                    sortOptionSelect.value = '';
                    // Change to grid view (default)
                    gridView.classList.remove('d-none');
                    listView.classList.add('d-none');
                    gridViewBtn.classList.add('active');
                    listViewBtn.classList.remove('active');
                    localStorage.setItem('library-view-mode', 'grid');
                    // Update the display
                    filterAndSortBooks();
                });
            }
        });
    </script>
}