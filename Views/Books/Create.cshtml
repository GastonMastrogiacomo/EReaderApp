@model EReaderApp.Models.Book
@{
    ViewData["Title"] = "Upload New Book";
}

<div class="container py-4">
    <h1 class="mb-4">Upload New Book</h1>

    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white py-3">
            <h5 class="mb-0"><i class="fas fa-search me-2"></i>Book Information Lookup</h5>
        </div>
        <div class="card-body">
            <p class="text-muted mb-3">Enter the book title and author to automatically fetch details from Google Books.</p>

            <div class="row g-3">
                <div class="col-md-5">
                    <label for="book-title-search" class="form-label">Book Title</label>
                    <input type="text" id="book-title-search" class="form-control" placeholder="Enter book title">
                </div>
                <div class="col-md-5">
                    <label for="book-author-search" class="form-label">Author</label>
                    <input type="text" id="book-author-search" class="form-control" placeholder="Enter author name">
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="button" id="search-book-btn" class="btn btn-primary w-100">
                        <i class="fas fa-search me-2"></i>Search
                    </button>
                </div>
            </div>

            <div id="search-status" class="mt-3" style="display: none;">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
                        <span class="visually-hidden">Searching...</span>
                    </div>
                    <span>Searching for book information...</span>
                </div>
            </div>

            <div id="search-results" class="mt-3" style="display: none;">
                <div class="alert alert-success">
                    <i class="fas fa-check-circle me-2"></i>
                    Book details found! The form below has been populated with the information.
                </div>
            </div>

            <div id="search-error" class="mt-3" style="display: none;">
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <span id="error-message">No book details found. Please fill in the information manually.</span>
                </div>
            </div>
        </div>
    </div>

    <form asp-action="Create" enctype="multipart/form-data" method="post" id="book-form">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="card shadow-sm mb-4">
            <div class="card-header bg-white py-3">
                <h5 class="mb-0"><i class="fas fa-book me-2"></i>Book Details</h5>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label asp-for="Title" class="form-label">Title <span class="text-danger">*</span></label>
                        <input asp-for="Title" class="form-control" required />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label asp-for="Author" class="form-label">Author <span class="text-danger">*</span></label>
                        <input asp-for="Author" class="form-control" required />
                        <span asp-validation-for="Author" class="text-danger"></span>
                    </div>

                    <div class="col-md-12">
                        <label asp-for="Description" class="form-label">Description</label>
                        <textarea asp-for="Description" class="form-control" rows="4"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label asp-for="ReleaseDate" class="form-label">Release Date</label>
                        <input asp-for="ReleaseDate" class="form-control" placeholder="e.g., 1995 or 1995-06-15" />
                        <span asp-validation-for="ReleaseDate" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Cover Image</label>

                        <!-- Tab navigation for image options -->
                        <ul class="nav nav-pills nav-sm mb-2" id="cover-image-tabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active small" id="url-tab" data-bs-toggle="pill" data-bs-target="#url-panel" type="button" role="tab">
                                    <i class="fas fa-link me-1"></i>URL
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link small" id="upload-tab" data-bs-toggle="pill" data-bs-target="#upload-panel" type="button" role="tab">
                                    <i class="fas fa-upload me-1"></i>Upload
                                </button>
                            </li>
                        </ul>

                        <!-- Tab content -->
                        <div class="tab-content" id="cover-image-content">
                            <!-- URL Panel -->
                            <div class="tab-pane fade show active" id="url-panel" role="tabpanel">
                                <input asp-for="ImageLink" class="form-control" placeholder="Enter image URL or use book search" />
                                <div class="form-text">Image URL will be auto-filled when searching for books</div>
                            </div>

                            <!-- Upload Panel -->
                            <div class="tab-pane fade" id="upload-panel" role="tabpanel">
                                <input type="file" name="coverImage" id="coverImageFile" class="form-control" accept="image/*" />
                                <div class="form-text">Upload a custom cover image (JPG, PNG, etc.)</div>
                            </div>
                        </div>

                        <span asp-validation-for="ImageLink" class="text-danger"></span>

                        <!-- Preview (works for both URL and upload) -->
                        <div id="cover-preview" class="mt-2" style="display: none;">
                            <img src="" alt="Book cover preview" class="img-thumbnail" style="max-height: 150px;" />
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label asp-for="PageCount" class="form-label">Page Count</label>
                        <input asp-for="PageCount" class="form-control" type="number" min="1" readonly />
                        <div class="form-text">Will be automatically detected from uploaded PDF</div>
                        <span asp-validation-for="PageCount" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Category <span class="text-danger">*</span></label>
                        <select name="categoryId" class="form-select" required>
                            <option value="">-- Select a category --</option>
                            @foreach (var item in ViewBag.Categories)
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                        <div class="form-text">Select at least one category for this book.</div>
                    </div>

                    <!-- Hidden fields for book metadata -->
                    <input type="hidden" asp-for="Score" value="0" />
                </div>
            </div>
        </div>

        <div class="card shadow-sm mb-4">
            <div class="card-header bg-white py-3">
                <h5 class="mb-0"><i class="fas fa-user-edit me-2"></i>Author Details</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12 mb-3">
                        <label asp-for="AuthorBio" class="form-label">Author Biography</label>
                        <textarea asp-for="AuthorBio" class="form-control" rows="3"></textarea>
                        <div class="form-text">A brief biography of the author.</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card shadow-sm mb-4">
            <div class="card-header bg-white py-3">
                <h5 class="mb-0"><i class="fas fa-file-pdf me-2"></i>PDF Upload</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="pdfFile" class="form-label">Upload PDF <span class="text-danger">*</span></label>
                    <input type="file" name="file" id="pdfFile" class="form-control" accept="application/pdf" required />
                    <div class="form-text">Please upload the book's PDF file. Page count will be automatically detected.</div>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-between">
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i>Back to List
            </a>
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-upload me-2"></i>Upload Book
            </button>
        </div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <!-- Load PDF.js for page count detection -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.5.141/pdf.min.js"></script>
    <script>
        // Set PDF.js worker
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.5.141/pdf.worker.min.js';
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elements
            const searchBtn = document.getElementById('search-book-btn');
            const titleSearchInput = document.getElementById('book-title-search');
            const authorSearchInput = document.getElementById('book-author-search');
            const titleInput = document.querySelector('input[name="Title"]');
            const authorInput = document.querySelector('input[name="Author"]');
            const descriptionInput = document.querySelector('textarea[name="Description"]');
            const releaseDateInput = document.querySelector('input[name="ReleaseDate"]');
            const imageLinkInput = document.querySelector('input[name="ImageLink"]');
            const pageCountInput = document.querySelector('input[name="PageCount"]');
            const authorBioInput = document.querySelector('textarea[name="AuthorBio"]');
            const pdfFileInput = document.getElementById('pdfFile');
            const coverImageFile = document.getElementById('coverImageFile');

            const searchStatus = document.getElementById('search-status');
            const searchResults = document.getElementById('search-results');
            const searchError = document.getElementById('search-error');
            const errorMessage = document.getElementById('error-message');
            const coverPreview = document.getElementById('cover-preview');
            const coverImage = coverPreview.querySelector('img');

            // Connect search fields with form fields for initial sync
            titleSearchInput.addEventListener('input', function() {
                titleInput.value = this.value;
            });

            authorSearchInput.addEventListener('input', function() {
                authorInput.value = this.value;
            });

            // Initialize form fields when values change directly
            titleInput.addEventListener('input', function() {
                titleSearchInput.value = this.value;
            });

            authorInput.addEventListener('input', function() {
                authorSearchInput.value = this.value;
            });

            // Search button click event
            searchBtn.addEventListener('click', function() {
                searchForBook();
            });

            // Cover image preview when URL changes
            imageLinkInput.addEventListener('change', updateCoverPreview);
            imageLinkInput.addEventListener('input', updateCoverPreview);

            // Add new event listener for file upload
            coverImageFile.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    const file = this.files[0];
                    const reader = new FileReader();

                    reader.onload = function(e) {
                        coverImage.src = e.target.result;
                        coverPreview.style.display = 'block';
                    };

                    reader.readAsDataURL(file);

                    // Clear the URL input when file is selected
                    imageLinkInput.value = '';
                }
            });

            // PDF file change event for page count detection
            pdfFileInput.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    extractPdfPageCount(this.files[0]);
                }
            });

            function updateCoverPreview() {
                // Only update if no file is selected
                if (!coverImageFile.files || coverImageFile.files.length === 0) {
                    const imageUrl = imageLinkInput.value.trim();
                    if (imageUrl) {
                        coverImage.src = imageUrl;
                        coverPreview.style.display = 'block';

                        // Handle image load error
                        coverImage.onerror = function() {
                            coverPreview.style.display = 'none';
                        }
                    } else {
                        coverPreview.style.display = 'none';
                    }
                }
            }

            // Extract PDF page count using PDF.js
            async function extractPdfPageCount(file) {
                try {
                    const arrayBuffer = await file.arrayBuffer();
                    const pdf = await pdfjsLib.getDocument(arrayBuffer).promise;
                    pageCountInput.value = pdf.numPages;
                    console.log(`PDF has ${pdf.numPages} pages`);
                } catch (error) {
                    console.error('Error reading PDF:', error);
                }
            }

            // Search for book using Open Library and Google Books APIs
            async function searchForBook() {
                const title = titleSearchInput.value.trim();
                const author = authorSearchInput.value.trim();

                if (!title) {
                    alert('Please enter a book title');
                    return;
                }

                // Show searching status
                searchStatus.style.display = 'block';
                searchResults.style.display = 'none';
                searchError.style.display = 'none';

                try {
                    // First, search Open Library for book details
                    await searchOpenLibrary(title, author);

                    // Then, search Google Books for cover image
                    await searchGoogleBooksForCover(title, author);

                    // Hide searching status
                    searchStatus.style.display = 'none';
                    searchResults.style.display = 'block';
                } catch (error) {
                    console.error('Error searching for book:', error);
                    searchStatus.style.display = 'none';
                    errorMessage.textContent = 'Error searching for book details. Please try again or fill in manually.';
                    searchError.style.display = 'block';
                }
            }

            async function searchOpenLibrary(title, author) {
                try {
                    const searchQuery = encodeURIComponent(`${title} ${author || ''}`);
                    const searchUrl = `https://openlibrary.org/search.json?q=${searchQuery}&limit=5`;

                    const response = await fetch(searchUrl);
                    const data = await response.json();

                    if (data.docs && data.docs.length > 0) {
                        const book = data.docs[0];

                        // Update basic info
                        titleInput.value = book.title || title;
                        if (book.author_name && book.author_name.length > 0) {
                            authorInput.value = book.author_name[0];
                        }

                        // Set release date
                        if (book.first_publish_year) {
                            releaseDateInput.value = book.first_publish_year.toString();
                        }

                        // Get detailed information if work key exists
                        if (book.key) {
                            await fetchOpenLibraryWorkDetails(book.key);
                        }
                    }
                } catch (error) {
                    console.error('Error fetching from Open Library:', error);
                }
            }

            async function fetchOpenLibraryWorkDetails(workKey) {
                try {
                    const workUrl = `https://openlibrary.org${workKey}.json`;
                    const response = await fetch(workUrl);
                    const workData = await response.json();

                    // Get description
                    if (workData.description) {
                        const description = typeof workData.description === 'string'
                            ? workData.description
                            : workData.description.value || '';
                        descriptionInput.value = description;
                    }

                    // Get author bio
                    if (workData.authors && workData.authors.length > 0) {
                        const authorKey = workData.authors[0].author?.key;
                        if (authorKey) {
                            await fetchAuthorBio(authorKey);
                        }
                    }
                } catch (error) {
                    console.error('Error fetching work details:', error);
                }
            }

            async function fetchAuthorBio(authorKey) {
                try {
                    const authorUrl = `https://openlibrary.org${authorKey}.json`;
                    const response = await fetch(authorUrl);
                    const authorData = await response.json();

                    if (authorData.bio) {
                        const bio = typeof authorData.bio === 'string'
                            ? authorData.bio
                            : authorData.bio.value || '';
                        authorBioInput.value = bio.substring(0, 500); // Limit length
                    }
                } catch (error) {
                    console.error('Error fetching author bio:', error);
                }
            }

            async function searchGoogleBooksForCover(title, author) {
                try {
                    let query = `intitle:"${encodeURIComponent(title)}"`;
                    if (author) {
                        query += `+inauthor:"${encodeURIComponent(author)}"`;
                    }

                    const apiUrl = `https://www.googleapis.com/books/v1/volumes?q=${query}&maxResults=1`;
                    const response = await fetch(apiUrl);
                    const data = await response.json();

                    if (data.items && data.items.length > 0) {
                        const bookInfo = data.items[0].volumeInfo;

                        // Set image link if available and no file is uploaded
                        if (bookInfo.imageLinks && (!coverImageFile.files || coverImageFile.files.length === 0)) {
                            imageLinkInput.value = bookInfo.imageLinks.extraLarge ||
                                                  bookInfo.imageLinks.large ||
                                                  bookInfo.imageLinks.medium ||
                                                  bookInfo.imageLinks.small ||
                                                  bookInfo.imageLinks.thumbnail ||
                                                  bookInfo.imageLinks.smallThumbnail || '';
                            updateCoverPreview();
                        }
                    }
                } catch (error) {
                    console.error('Error fetching cover from Google Books:', error);
                }
            }
        });
    </script>
}