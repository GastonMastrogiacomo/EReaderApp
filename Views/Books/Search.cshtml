@model IEnumerable<EReaderApp.Models.Book>
@{
    ViewData["Title"] = "Browse Books";
    var categories = ViewBag.Categories as List<EReaderApp.Models.Category>;
    var currentCategory = ViewBag.CurrentCategory as int?;
    var searchQuery = ViewBag.SearchQuery as string;
    var sortBy = ViewBag.SortBy as string ?? "title";

    // Pagination variables
    var currentPage = ViewBag.CurrentPage ?? 1;
    var totalPages = ViewBag.TotalPages ?? 1;
    var totalBooks = ViewBag.TotalBooks ?? 0;
    var pageSize = ViewBag.PageSize ?? 5;
    var hasPreviousPage = ViewBag.HasPreviousPage ?? false;
    var hasNextPage = ViewBag.HasNextPage ?? false;
}

<div class="container my-4">
    <div class="row mb-4">
        <div class="col-md-8">
            <h1 class="mb-3">Browse Our Collection</h1>
            <p class="text-muted">Find your next favorite book from our extensive library</p>
        </div>
    </div>

    <!-- Search and Filter Section with Shadow -->
    <div class="card shadow-sm mb-5">
        <div class="card-body p-4">
            <div class="row">
                <div class="col-md-6 mb-3 mb-md-0">
                    <form method="get" class="d-flex">
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="fas fa-search text-muted"></i>
                            </span>
                            <input type="text" name="query" class="form-control border-start-0"
                                   placeholder="Search by title, author, or description" value="@searchQuery" />
                            <input type="hidden" name="sortBy" value="@sortBy" />
                            <input type="hidden" name="categoryId" value="@currentCategory" />
                            <button type="submit" class="btn btn-primary">
                                Search
                            </button>
                        </div>
                    </form>
                </div>
                <div class="col-md-3">
                    <form method="get">
                        <input type="hidden" name="query" value="@searchQuery" />
                        <input type="hidden" name="sortBy" value="@sortBy" />
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="fas fa-filter text-muted"></i>
                            </span>
                            <select name="categoryId" class="form-select border-start-0" onchange="this.form.submit()">
                                <option value="">All Categories</option>
                                @foreach (var category in categories)
                                {
                                    @if (currentCategory == category.IdCategory)
                                    {
                                        <option value="@category.IdCategory" selected>@category.CategoryName</option>
                                    }
                                    else
                                    {
                                        <option value="@category.IdCategory">@category.CategoryName</option>
                                    }
                                }
                            </select>
                        </div>
                    </form>
                </div>
                <div class="col-md-3">
                    <form method="get">
                        <input type="hidden" name="query" value="@searchQuery" />
                        <input type="hidden" name="categoryId" value="@currentCategory" />
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="fas fa-sort text-muted"></i>
                            </span>
                            @{
                                var sortOptions = new List<SelectListItem>
                            {
                            new SelectListItem { Value = "title", Text = "Sort by Title", Selected = (sortBy == "title" || string.IsNullOrEmpty(sortBy)) },
                            new SelectListItem { Value = "author", Text = "Sort by Author", Selected = (sortBy == "author") },
                            new SelectListItem { Value = "rating", Text = "Sort by Rating", Selected = (sortBy == "rating") }
                            };
                            }
                            @Html.DropDownList("sortBy", sortOptions, new { @class = "form-select border-start-0", onchange = "this.form.submit()" })
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info shadow-sm">
            <i class="fas fa-info-circle me-2"></i>
            No books found matching your criteria. Try adjusting your search or browse all categories.
        </div>
    }
    else
    {
        <!-- Results Summary and View Toggle -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                <span class="text-muted">
                    Showing @((currentPage - 1) * pageSize + 1) - @Math.Min(currentPage * pageSize, totalBooks) of @totalBooks @(totalBooks == 1 ? "book" : "books")
                    @if (!string.IsNullOrEmpty(searchQuery))
                    {
                        <text>for "<strong>@searchQuery</strong>"</text>
                    }
                    @if (currentCategory.HasValue)
                    {
                        var categoryName = categories.FirstOrDefault(c => c.IdCategory == currentCategory)?.CategoryName;
                        <text>in <strong>@categoryName</strong></text>
                    }
                </span>
            </div>
            <div>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="grid-view-btn" title="Grid View">
                        <i class="fas fa-th-large"></i>
                    </button>
                    <button type="button" class="btn btn-outline-secondary btn-sm active" id="list-view-btn" title="List View">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
                <a href="@Url.Action("Search")" class="btn btn-outline-secondary btn-sm ms-2 @(string.IsNullOrEmpty(searchQuery) && !currentCategory.HasValue && sortBy == "title" ? "d-none" : "")">
                    <i class="fas fa-times me-1"></i> Clear Filters
                </a>
            </div>
        </div>

        <!-- Book Grid View (hidden by default) -->
        <div id="grid-view" class="row row-cols-2 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 g-3 d-none">
            @foreach (var book in Model)
            {
                var reviewStats = ViewBag.ReviewStats as Dictionary<int, EReaderApp.Controllers.BooksController.ReviewStatistics>;
                var hasReviewStats = reviewStats != null && reviewStats.ContainsKey(book.IdBook);
                var reviewCount = hasReviewStats ? reviewStats[book.IdBook].Count : 0;
                var averageRating = hasReviewStats ? reviewStats[book.IdBook].AverageRating : 0;
                <div class="col">
                    <div class="card h-100 shadow-sm border-0 book-card hover-elevate overflow-hidden">
                        <div class="position-relative">
                            <a href="@Url.Action("ViewDetails", "Books", new { id = book.IdBook })" class="text-decoration-none">
                                <div class="book-cover-container">
                                    @if (!string.IsNullOrEmpty(book.ImageLink))
                                    {
                                        <div class="book-cover" style="background-image: url('@book.ImageLink');"></div>
                                    }
                                    else
                                    {
                                        <div class="default-cover">
                                            <i class="fas fa-book text-secondary fa-3x mb-2"></i>
                                            <span class="small text-truncate w-100 px-2">@book.Title</span>
                                        </div>
                                    }
                                </div>
                            </a>

                            <!-- Hover overlay with read button -->
                            <div class="book-overlay">
                                @if (User.Identity.IsAuthenticated)
                                {
                                    @if (!string.IsNullOrEmpty(book.PdfPath))
                                    {
                                        <a asp-controller="Reader" asp-action="Read" asp-route-id="@book.IdBook"
                                           class="btn btn-primary btn-sm">
                                            <i class="fas fa-book-open me-1"></i> Read Now
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="btn btn-secondary btn-sm disabled">
                                            <i class="fas fa-times me-1"></i> Not Available
                                        </span>
                                    }
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(book.PdfPath))
                                    {
                                        <button type="button" class="btn btn-primary btn-sm"
                                                data-bs-toggle="modal"
                                                data-bs-target="#searchLoginModal"
                                                data-book-id="@book.IdBook"
                                                data-book-title="@book.Title">
                                            <i class="fas fa-lock me-1"></i> Login to Read
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="btn btn-secondary btn-sm disabled">
                                            <i class="fas fa-times me-1"></i> Not Available
                                        </span>
                                    }
                                }
                            </div>

                            @if (hasReviewStats && reviewCount > 0)
                            {
                                <div class="book-score">
                                    <i class="fas fa-star me-1"></i> @averageRating.ToString("F1")
                                </div>
                            }
                        </div>

                        <div class="card-body p-3 d-flex flex-column">
                            <h5 class="card-title fw-bold text-truncate" title="@book.Title">@book.Title</h5>
                            <p class="card-text text-muted small text-truncate mb-3" title="@book.Author">@book.Author</p>

                            <div class="mt-auto d-flex gap-2">
                                @if (User.Identity.IsAuthenticated)
                                {
                                    @if (!string.IsNullOrEmpty(book.PdfPath))
                                    {
                                        <a href="@Url.Action("Read", "Reader", new { id = book.IdBook })" class="btn btn-primary btn-sm flex-grow-1">
                                            <i class="fas fa-book-open me-1"></i> Read
                                        </a>
                                    }
                                    else
                                    {
                                        <button class="btn btn-secondary btn-sm flex-grow-1 disabled">
                                            <i class="fas fa-times me-1"></i> Not Available
                                        </button>
                                    }
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(book.PdfPath))
                                    {
                                        <button type="button" class="btn btn-primary btn-sm flex-grow-1"
                                                data-bs-toggle="modal"
                                                data-bs-target="#searchLoginModal"
                                                data-book-id="@book.IdBook"
                                                data-book-title="@book.Title">
                                            <i class="fas fa-lock me-1"></i> Login to Read
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-secondary btn-sm flex-grow-1 disabled">
                                            <i class="fas fa-times me-1"></i> Not Available
                                        </button>
                                    }
                                }
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end shadow-sm border-0">
                                        <li>
                                            <a class="dropdown-item" href="@Url.Action("ViewDetails", "Books", new { id = book.IdBook })">
                                                <i class="fas fa-info-circle me-2 text-primary"></i> Details
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Book List View (shown by default) -->
        <div id="list-view">
            <div class="list-group">
                @foreach (var book in Model)
                {
                    var reviewStats = ViewBag.ReviewStats as Dictionary<int, EReaderApp.Controllers.BooksController.ReviewStatistics>;
                    var hasReviewStats = reviewStats != null && reviewStats.ContainsKey(book.IdBook);
                    var reviewCount = hasReviewStats ? reviewStats[book.IdBook].Count : 0;
                    var averageRating = hasReviewStats ? reviewStats[book.IdBook].AverageRating : 0;
                    <div class="list-group-item list-group-item-action p-3 border-0 shadow-sm mb-3 rounded hover-elevate">
                        <div class="row align-items-center">
                            <div class="col-md-1 col-3">
                                <div class="position-relative list-book-cover">
                                    <a href="@Url.Action("ViewDetails", "Books", new { id = book.IdBook })" class="text-decoration-none">
                                        @if (!string.IsNullOrEmpty(book.ImageLink))
                                        {
                                            <div class="list-cover" style="background-image: url('@book.ImageLink');"></div>
                                        }
                                        else
                                        {
                                            <div class="default-list-cover">
                                                <i class="fas fa-book text-secondary"></i>
                                            </div>
                                        }
                                    </a>
                                </div>
                            </div>
                            <div class="col-md-9 col-9">
                                <h5 class="mb-1 fw-bold">
                                    <a href="@Url.Action("ViewDetails", "Books", new { id = book.IdBook })" class="text-decoration-none text-dark">
                                        @book.Title
                                    </a>
                                </h5>
                                <p class="mb-1 text-muted">@book.Author</p>
                                <div class="d-flex align-items-center mb-1">
                                    @if (hasReviewStats && reviewCount > 0)
                                    {
                                        <span class="badge bg-warning text-dark me-2">
                                            <i class="fas fa-star me-1"></i> @averageRating.ToString("F1") (@reviewCount)
                                        </span>
                                    }

                                    @if (book.PageCount.HasValue)
                                    {
                                        <small class="text-muted me-2"><i class="fas fa-file me-1"></i> @book.PageCount pages</small>
                                    }
                                </div>
                                <small class="text-muted">
                                    @(book.Description?.Length > 100
                                        ? book.Description.Substring(0, 100) + "..."
                                        : book.Description)
                                </small>
                            </div>
                            <div class="col-md-2 col-12 mt-3 mt-md-0">
                                <div class="d-flex gap-2 justify-content-md-end">
                                    @if (User.Identity.IsAuthenticated)
                                    {
                                        @if (!string.IsNullOrEmpty(book.PdfPath))
                                        {
                                            <a href="@Url.Action("Read", "Reader", new { id = book.IdBook })" class="btn btn-sm btn-primary flex-grow-1 flex-md-grow-0">
                                                <i class="fas fa-book-open me-1"></i> Read
                                            </a>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-secondary flex-grow-1 flex-md-grow-0 disabled">
                                                <i class="fas fa-times me-1"></i> Not Available
                                            </button>
                                        }
                                    }
                                    else
                                    {
                                        @if (!string.IsNullOrEmpty(book.PdfPath))
                                        {
                                            <button type="button" class="btn btn-sm btn-primary flex-grow-1 flex-md-grow-0"
                                                    data-bs-toggle="modal"
                                                    data-bs-target="#searchLoginModal"
                                                    data-book-id="@book.IdBook"
                                                    data-book-title="@book.Title">
                                                <i class="fas fa-lock me-1"></i> Login to Read
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-secondary flex-grow-1 flex-md-grow-0 disabled">
                                                <i class="fas fa-times me-1"></i> Not Available
                                            </button>
                                        }
                                    }
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end shadow-sm border-0">
                                            <li>
                                                <a class="dropdown-item" href="@Url.Action("ViewDetails", "Books", new { id = book.IdBook })">
                                                    <i class="fas fa-info-circle me-2 text-primary"></i> Details
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Pagination Controls -->
        @if (totalPages > 1)
        {
            <nav aria-label="Book search pagination" class="mt-4">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <div class="pagination-info">
                        <small class="text-muted">
                            Page @currentPage of @totalPages
                        </small>
                    </div>
                    <div class="pagination-controls">
                        <ul class="pagination pagination-sm mb-0">
                            <!-- First Page -->
                            @if (currentPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Search", new { query = searchQuery, categoryId = currentCategory, sortBy = sortBy, page = 1 })"
                                       title="First Page">
                                        <i class="fas fa-angle-double-left"></i>
                                    </a>
                                </li>
                            }

                            <!-- Previous Page -->
                            @if (hasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Search", new { query = searchQuery, categoryId = currentCategory, sortBy = sortBy, page = currentPage - 1 })"
                                       title="Previous Page">
                                        <i class="fas fa-chevron-left"></i>
                                    </a>
                                </li>
                            }

                            <!-- Page Numbers -->
                            @{
                                int startPage = Math.Max(1, currentPage - 2);
                                int endPage = Math.Min(totalPages, currentPage + 2);

                                // Ensure we always show 5 pages if possible
                                if (endPage - startPage < 4)
                                {
                                    if (startPage == 1)
                                    {
                                        endPage = Math.Min(totalPages, startPage + 4);
                                    }
                                    else if (endPage == totalPages)
                                    {
                                        startPage = Math.Max(1, endPage - 4);
                                    }
                                }
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    @if (i == currentPage)
                                    {
                                        <span class="page-link">@i</span>
                                    }
                                    else
                                    {
                                        <a class="page-link" href="@Url.Action("Search", new { query = searchQuery, categoryId = currentCategory, sortBy = sortBy, page = i })">@i</a>
                                    }
                                </li>
                            }

                            <!-- Next Page -->
                            @if (hasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Search", new { query = searchQuery, categoryId = currentCategory, sortBy = sortBy, page = currentPage + 1 })"
                                       title="Next Page">
                                        <i class="fas fa-chevron-right"></i>
                                    </a>
                                </li>
                            }

                            <!-- Last Page -->
                            @if (currentPage < totalPages)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Search", new { query = searchQuery, categoryId = currentCategory, sortBy = sortBy, page = totalPages })"
                                       title="Last Page">
                                        <i class="fas fa-angle-double-right"></i>
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                </div>

                <!-- Quick Jump to Page -->
                @if (totalPages > 10)
                {
                    <div class="d-flex justify-content-center">
                        <form method="get" class="d-flex align-items-center">
                            <input type="hidden" name="query" value="@searchQuery" />
                            <input type="hidden" name="categoryId" value="@currentCategory" />
                            <input type="hidden" name="sortBy" value="@sortBy" />
                            <small class="text-muted me-2">Jump to page:</small>
                            <input type="number" name="page" class="form-control form-control-sm me-2"
                                   style="width: 80px;" min="1" max="@totalPages" value="@currentPage" />
                            <button type="submit" class="btn btn-outline-primary btn-sm">Go</button>
                        </form>
                    </div>
                }
            </nav>
        }
    }
</div>

<!-- Login Required Modal for Search Page -->
<div class="modal fade" id="searchLoginModal" tabindex="-1" aria-labelledby="searchLoginModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="searchLoginModalLabel">
                    <i class="fas fa-lock me-2 text-primary"></i>Login Required
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center py-4">
                <div class="mb-4">
                    <i class="fas fa-book-reader fa-3x text-primary mb-3"></i>
                    <h6 class="fw-bold" id="search-modal-book-title">Ready to dive into this book?</h6>
                    <p class="text-muted mb-0">
                        Please log in to your account to start reading this book and track your progress.
                    </p>
                </div>

                <div class="d-flex gap-3 justify-content-center">
                    <a id="search-modal-login-link" href="#" class="btn btn-primary">
                        <i class="fas fa-sign-in-alt me-2"></i>Login
                    </a>
                    <a id="search-modal-register-link" href="#" class="btn btn-outline-primary">
                        <i class="fas fa-user-plus me-2"></i>Sign Up
                    </a>
                </div>

                <div class="mt-3">
                    <small class="text-muted">
                        <i class="fas fa-shield-alt me-1"></i>
                        Free account • Track your reading progress
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Card hover effects */
    .hover-elevate {
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .hover-elevate:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
        }

    /* Book cover styling for grid view */
    .book-cover-container {
        height: 220px;
        overflow: hidden;
        position: relative;
    }

    .book-cover {
        height: 100%;
        width: 100%;
        background-position: center;
        background-size: cover;
        background-repeat: no-repeat;
        transition: transform 0.3s ease;
    }

    .book-card:hover .book-cover {
        transform: scale(1.05);
    }

    .default-cover {
        height: 100%;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background-color: #f8f9fa;
        color: #6c757d;
        padding: 1rem;
        text-align: center;
    }

    /* Book overlay styles */
    .book-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(to bottom, rgba(0,0,0,0.3), rgba(0,0,0,0.8));
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .book-card:hover .book-overlay {
        opacity: 1;
    }

    .book-overlay .btn {
        transform: translateY(20px);
        transition: transform 0.3s ease;
        box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    }

    .book-card:hover .book-overlay .btn {
        transform: translateY(0);
    }

    /* Book cover styling for list view */
    .list-book-cover {
        height: 80px;
        width: 60px;
        overflow: hidden;
        border-radius: 4px;
    }

    .list-cover {
        height: 100%;
        width: 100%;
        background-position: center;
        background-size: cover;
        background-repeat: no-repeat;
    }

    .default-list-cover {
        height: 100%;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f8f9fa;
        border-radius: 4px;
    }

    /* Rating badge */
    .book-score {
        position: absolute;
        top: 8px;
        right: 8px;
        background-color: #ffc107;
        color: #212529;
        padding: 0.25rem 0.5rem;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.8rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    /* Button styling */
    .btn-primary {
        background-color: var(--primary-color, #0d6efd);
        border-color: var(--primary-color, #0d6efd);
    }

        .btn-primary:hover {
            background-color: var(--primary-color-dark, #0b5ed7);
            border-color: var(--primary-color-dark, #0b5ed7);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

    .btn-outline-secondary:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    /* Card styling */
    .book-card {
        border-radius: 8px;
    }

    /* Consistent transitions */
    .card, .btn, .form-control, .input-group, .list-group-item {
        transition: all 0.2s ease-in-out;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // View toggle functionality
            const gridViewBtn = document.getElementById('grid-view-btn');
            const listViewBtn = document.getElementById('list-view-btn');
            const gridView = document.getElementById('grid-view');
            const listView = document.getElementById('list-view');

            // Load view preference from localStorage
            const savedView = localStorage.getItem('book-view-mode');
            // Default to list view if no preference saved
            if (savedView === 'grid') {
                gridView.classList.remove('d-none');
                listView.classList.add('d-none');
                gridViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
            } else {
                // List view is already the default in HTML
                localStorage.setItem('book-view-mode', 'list');
            }

            // Toggle to grid view
            gridViewBtn.addEventListener('click', function() {
                gridView.classList.remove('d-none');
                listView.classList.add('d-none');
                gridViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
                localStorage.setItem('book-view-mode', 'grid');
            });

            // Toggle to list view
            listViewBtn.addEventListener('click', function() {
                gridView.classList.add('d-none');
                listView.classList.remove('d-none');
                listViewBtn.classList.add('active');
                gridViewBtn.classList.remove('active');
                localStorage.setItem('book-view-mode', 'list');
            });

            // Handle login modal for search page
            const searchLoginModal = document.getElementById('searchLoginModal');
            if (searchLoginModal) {
                searchLoginModal.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget;
                    const bookId = button.getAttribute('data-book-id');
                    const bookTitle = button.getAttribute('data-book-title');

                    // Update modal content
                    const modalTitle = document.getElementById('search-modal-book-title');
                    const loginLink = document.getElementById('search-modal-login-link');
                    const registerLink = document.getElementById('search-modal-register-link');

                    if (modalTitle && bookTitle) {
                        modalTitle.textContent = `Ready to dive into "${bookTitle}"?`;
                    }

                    if (loginLink && bookId) {
                        const returnUrl = encodeURIComponent(`/Reader/Read/${bookId}`);
                        loginLink.href = `/Auth/Login?returnUrl=${returnUrl}`;
                    }

                    if (registerLink && bookId) {
                        const returnUrl = encodeURIComponent(`/Reader/Read/${bookId}`);
                        registerLink.href = `/Auth/Register?returnUrl=${returnUrl}`;
                    }
                });
            }
        });
    </script>
}