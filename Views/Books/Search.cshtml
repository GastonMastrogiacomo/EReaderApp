@model IEnumerable<EReaderApp.Models.Book>
@{
    ViewData["Title"] = "Browse Books";
    var categories = ViewBag.Categories as List<EReaderApp.Models.Category>;
    var currentCategory = ViewBag.CurrentCategory as int?;
    var searchQuery = ViewBag.SearchQuery as string;
}

<div class="container my-4">
    <div class="row mb-4">
        <div class="col-md-8">
            <h1 class="mb-3">Browse Our Collection</h1>
            <p class="text-muted">Find your next favorite book from our extensive library</p>
        </div>
    </div>

    <!-- Search and Filter Section with Shadow -->
    <div class="card shadow-sm mb-5">
        <div class="card-body p-4">
            <div class="row">
                <div class="col-md-8 mb-3 mb-md-0">
                    <form method="get" class="d-flex">
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="fas fa-search text-muted"></i>
                            </span>
                            <input type="text" name="query" class="form-control border-start-0"
                                   placeholder="Search by title, author, or description" value="@searchQuery" />
                            <button type="submit" class="btn btn-primary">
                                Search
                            </button>
                        </div>
                    </form>
                </div>
                <div class="col-md-4">
                    <form method="get">
                        <input type="hidden" name="query" value="@searchQuery" />
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="fas fa-filter text-muted"></i>
                            </span>
                            <select name="categoryId" class="form-select border-start-0" onchange="this.form.submit()">
                                <option value="">All Categories</option>
                                @foreach (var category in categories)
                                {
                                    @if (currentCategory == category.IdCategory)
                                    {
                                        <option value="@category.IdCategory" selected>@category.CategoryName</option>
                                    }
                                    else
                                    {
                                        <option value="@category.IdCategory">@category.CategoryName</option>
                                    }
                                }
                            </select>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info shadow-sm">
            <i class="fas fa-info-circle me-2"></i>
            No books found matching your criteria. Try adjusting your search or browse all categories.
        </div>
    }
    else
    {
        <!-- Results Summary and View Toggle -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                <span class="text-muted">
                    Showing @Model.Count() @(Model.Count() == 1 ? "book" : "books")
                    @if (!string.IsNullOrEmpty(searchQuery))
                    {
                        <text>for "<strong>@searchQuery</strong>"</text>
                    }
                    @if (currentCategory.HasValue)
                    {
                        var categoryName = categories.FirstOrDefault(c => c.IdCategory == currentCategory)?.CategoryName;
                        <text>in <strong>@categoryName</strong></text>
                    }
                </span>
            </div>
            <div>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="grid-view-btn" title="Grid View">
                        <i class="fas fa-th-large"></i>
                    </button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="list-view-btn" title="List View">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
                <a href="@Url.Action("Search")" class="btn btn-outline-secondary btn-sm ms-2 @(string.IsNullOrEmpty(searchQuery) && !currentCategory.HasValue ? "d-none" : "")">
                    <i class="fas fa-times me-1"></i> Clear Filters
                </a>
            </div>
        </div>

        <!-- Book Grid View (default) -->
        <div id="grid-view" class="row row-cols-2 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 g-3">
            @foreach (var book in Model)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm border-0 book-card improved">
                        <a href="@Url.Action("ViewDetails", "Books", new { id = book.IdBook })" class="text-decoration-none">
                            <div class="book-cover-container">
                                @if (!string.IsNullOrEmpty(book.ImageLink))
                                {
                                    <img src="@book.ImageLink" class="card-img-top book-cover" alt="@book.Title" />
                                }
                                else
                                {
                                    <div class="default-cover">
                                        <i class="fas fa-book text-secondary"></i>
                                        <span>@book.Title</span>
                                    </div>
                                }

                                <!-- Rating badge -->
                                @{
                                    var reviewStats = ViewBag.ReviewStats as Dictionary<int, EReaderApp.Controllers.BooksController.ReviewStatistics>;
                                    var hasReviewStats = reviewStats != null && reviewStats.ContainsKey(book.IdBook);
                                    var reviewCount = hasReviewStats ? reviewStats[book.IdBook].Count : 0;
                                    var averageRating = hasReviewStats ? reviewStats[book.IdBook].AverageRating : 0;
                                }
                                @if (hasReviewStats && reviewCount > 0)
                                {
                                    <div class="book-score-badge">
                                        <i class="fas fa-star text-warning"></i> @averageRating.ToString("F1")
                                    </div>
                                }
                            </div>

                            <div class="card-body p-2">
                                <h5 class="card-title text-truncate mb-1" title="@book.Title">@book.Title</h5>
                                <p class="card-text text-muted small mb-0 text-truncate" title="@book.Author">@book.Author</p>
                            </div>
                        </a>
                    </div>
                </div>
            }
        </div>

        <!-- Book List View (hidden by default) -->
        <div id="list-view" class="d-none">
            <div class="list-group">
                @foreach (var book in Model)
                {
                    <a href="@Url.Action("ViewDetails", "Books", new { id = book.IdBook })" class="list-group-item list-group-item-action">
                        <div class="row">
                            <div class="col-md-1 col-2">
                                @if (!string.IsNullOrEmpty(book.ImageLink))
                                {
                                    <img src="@book.ImageLink" class="img-fluid rounded" alt="@book.Title" />
                                }
                                else
                                {
                                    <div class="bg-light d-flex align-items-center justify-content-center rounded" style="height: 60px;">
                                        <i class="fas fa-book text-secondary"></i>
                                    </div>
                                }
                            </div>
                            <div class="col-md-11 col-10">
                                <div class="d-flex w-100 justify-content-between">
                                    <h5 class="mb-1">@book.Title</h5>
                                    @{
                                        var reviewStats = ViewBag.ReviewStats as Dictionary<int, EReaderApp.Controllers.BooksController.ReviewStatistics>;
                                        var hasReviewStats = reviewStats != null && reviewStats.ContainsKey(book.IdBook);
                                        var reviewCount = hasReviewStats ? reviewStats[book.IdBook].Count : 0;
                                        var averageRating = hasReviewStats ? reviewStats[book.IdBook].AverageRating : 0;
                                    }
                                    @if (hasReviewStats && reviewCount > 0)
                                    {
                                        <span class="badge bg-warning text-dark">
                                            <i class="fas fa-star"></i> @averageRating.ToString("F1") (@reviewCount)
                                        </span>
                                    }
                                </div>
                                <p class="mb-1">@book.Author</p>
                                <small class="text-muted">
                                    @(book.Description?.Length > 100
                                        ? book.Description.Substring(0, 100) + "..."
                                        : book.Description)
                                </small>
                            </div>
                        </div>
                    </a>
                }
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // View toggle functionality
            const gridViewBtn = document.getElementById('grid-view-btn');
            const listViewBtn = document.getElementById('list-view-btn');
            const gridView = document.getElementById('grid-view');
            const listView = document.getElementById('list-view');

            // Load view preference from localStorage
            const savedView = localStorage.getItem('book-view-mode');
            if (savedView === 'list') {
                gridView.classList.add('d-none');
                listView.classList.remove('d-none');
                listViewBtn.classList.add('active');
                gridViewBtn.classList.remove('active');
            } else {
                // Default to grid view
                gridViewBtn.classList.add('active');
            }

            // Toggle to grid view
            gridViewBtn.addEventListener('click', function() {
                gridView.classList.remove('d-none');
                listView.classList.add('d-none');
                gridViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
                localStorage.setItem('book-view-mode', 'grid');
            });

            // Toggle to list view
            listViewBtn.addEventListener('click', function() {
                gridView.classList.add('d-none');
                listView.classList.remove('d-none');
                listViewBtn.classList.add('active');
                gridViewBtn.classList.remove('active');
                localStorage.setItem('book-view-mode', 'list');
            });
        });
    </script>
}