@model EReaderApp.Models.Book
@{
    ViewData["Title"] = Model.Title;
    var categories = ViewBag.Categories as List<EReaderApp.Models.Category>;
    var reviews = ViewBag.Reviews as List<EReaderApp.Models.Review>;
    var userLibraries = ViewBag.UserLibraries as List<EReaderApp.Models.Library>;
    var totalReviews = ViewBag.TotalReviews ?? 0;
    var averageRating = ViewBag.AverageRating ?? 0.0;
    var ratingDistribution = ViewBag.RatingDistribution as Dictionary<int, int> ?? new Dictionary<int, int>();

    // Check if we have author information
    var hasAuthorInfo = !string.IsNullOrEmpty(Model.AuthorBio);
}

<!-- Hidden CSRF token for AJAX requests -->
@Html.AntiForgeryToken()

<style>
    .book-cover-large {
        height: 600px;
        width: 100%;
        background-position: center;
        background-repeat: no-repeat;
    }

    .book-title {
        font-weight: 700;
        line-height: 1.2;
    }

    #book-description {
        line-height: 1.6;
    }

    .tab-panel {
        display: none;
    }

        .tab-panel.active {
            display: block;
        }

    .tab-button {
        position: relative;
        transition: all 0.3s ease;
    }

        .tab-button.active {
            color: var(--primary-color);
            font-weight: 600;
        }

            .tab-button.active::after {
                content: '';
                position: absolute;
                bottom: -12px;
                left: 0;
                right: 0;
                height: 3px;
                background-color: var(--primary-color);
            }
</style>

<div class="container py-4">

    <div class="row">
        <!-- Book cover and action buttons column -->
        <div class="col-md-4 mb-4">
            <div class="card border-0 shadow-sm rounded-3 overflow-hidden">
                <div class="position-relative">
                    <!-- Default image if no cover is available -->
                    <div id="book-cover" class="book-cover-large bg-light d-flex align-items-center justify-content-center"
                         style="@(string.IsNullOrEmpty(Model.ImageLink) ? "" : $"background-image: url('{Model.ImageLink}'); background-size: cover;")">
                        @if (string.IsNullOrEmpty(Model.ImageLink))
                        {
                            <i class="fas fa-book fa-4x text-secondary opacity-50"></i>
                        }
                    </div>

                    <!-- Book rating badge if available -->
                    @if (totalReviews > 0)
                    {
                        <div class="position-absolute top-0 end-0 m-2 bg-primary text-white p-2 rounded">
                            <div class="d-flex align-items-center">
                                <span class="fw-bold me-1">@averageRating.ToString("0.0")</span>
                                <i class="fas fa-star ms-1"></i>
                            </div>
                            <div class="small text-center">@totalReviews reseña@(totalReviews != 1 ? "s" : "")</div>
                        </div>
                    }
                </div>

                <!-- Action buttons -->
                <div class="card-body p-3">
                    <div class="d-grid gap-2">
                        @if (!string.IsNullOrEmpty(Model.PdfPath))
                        {
                            <a asp-controller="Reader" asp-action="Read" asp-route-id="@Model.IdBook" class="btn btn-primary">
                                <i class="fas fa-book-open me-2"></i> Leer libro
                            </a>
                        }

                        @if (User.Identity.IsAuthenticated && userLibraries != null && userLibraries.Any())
                        {
                            <div class="dropdown">
                                <button class="btn btn-outline-primary dropdown-toggle w-100" type="button"
                                        id="addToLibraryDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-bookmark me-2"></i> Añadir a biblioteca
                                </button>
                                <ul class="dropdown-menu w-100" aria-labelledby="addToLibraryDropdown">
                                    @foreach (var library in userLibraries)
                                    {
                                        <li>
                                            <form asp-controller="Libraries" asp-action="AddToLibrary" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="bookId" value="@Model.IdBook" />
                                                <input type="hidden" name="libraryId" value="@library.IdLibrary" />
                                                <button type="submit" class="dropdown-item">@library.ListName</button>
                                            </form>
                                        </li>
                                    }
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#newLibraryModal">
                                            <i class="fas fa-plus me-2"></i> Crear nueva biblioteca
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        }
                        else if (User.Identity.IsAuthenticated)
                        {
                            <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#newLibraryModal">
                                <i class="fas fa-bookmark me-2"></i> Añadir a nueva biblioteca
                            </button>
                        }
                        else
                        {
                            <a asp-controller="Auth" asp-action="Login" asp-route-returnUrl="@Url.Action("ViewDetails", "Books", new { id = Model.IdBook })"
                               class="btn btn-outline-primary">
                                <i class="fas fa-bookmark me-2"></i> Inicia sesión para guardar
                            </a>
                        }

                        <!-- Share button -->
                        <button type="button" class="btn btn-outline-secondary"
                                onclick="shareBook(@Model.IdBook, '@Model.Title.Replace("'", "\\'")'); return false;">
                            <i class="fas fa-share-alt me-2"></i> Compartir libro
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Book details column -->
        <div class="col-md-8">
            <h1 class="book-title mb-2">@Model.Title</h1>
            <div class="mb-4">
                <h5>
                    <span class="fw-bold">Por @Model.Author</span>
                    @if (!string.IsNullOrEmpty(Model.ReleaseDate))
                    {
                        <span class="text-muted"> • @Model.ReleaseDate</span>
                    }
                </h5>
                </h5>

                <!-- Categories -->
                @if (categories != null && categories.Any())
                {
                    <div class="mb-3">
                        @foreach (var category in categories)
                        {
                            <a href="@Url.Action("Search", "Books", new { categoryId = category.IdCategory })"
                               class="badge rounded-pill bg-primary text-decoration-none me-1">
                                @category.CategoryName
                            </a>
                        }
                    </div>
                }
            </div>

            <!-- Tabs Navigation -->
            <div class="mb-4 border-bottom">
                <div class="d-flex">
                    <div class="me-4 pb-2">
                        <button class="btn btn-link text-decoration-none tab-button active" data-target="overview-panel">
                            <i class="fas fa-info-circle me-1"></i> Información
                        </button>
                    </div>
                    <div class="me-4 pb-2">
                        <button class="btn btn-link text-decoration-none tab-button" data-target="author-panel">
                            <i class="fas fa-user me-1"></i> Autor
                        </button>
                    </div>
                    <div class="pb-2">
                        <button class="btn btn-link text-decoration-none tab-button" data-target="reviews-panel">
                            <i class="fas fa-star me-1"></i> Reseñas <span class="badge bg-primary rounded-pill">@totalReviews</span>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Tab Content -->
            <div class="tab-content">
                <!-- Overview Panel -->
                <div id="overview-panel" class="tab-panel active">
                    <div class="card mb-4 shadow-sm">
                        <div class="card-header bg-white">
                            <h5 class="mb-0"><i class="fas fa-info-circle me-2 text-primary"></i>Acerca de este libro</h5>
                        </div>
                        <div class="card-body">
                            <div id="book-description" class="mb-3">
                                @if (!string.IsNullOrEmpty(Model.Description))
                                {
                                    <p>@Model.Description</p>
                                }
                                else
                                {
                                    <p class="text-muted fst-italic">No hay descripción disponible.</p>
                                }
                            </div>

                            <!-- Details section -->
                            <div class="row mt-4" id="book-details">
                                @if (Model.PageCount.HasValue)
                                {
                                    <div class="col-md-4 mb-3">
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-file me-2 text-primary"></i>
                                            <div>
                                                <small class="text-muted d-block">Páginas</small>
                                                <span>@Model.PageCount</span>
                                            </div>
                                        </div>
                                    </div>
                                }

                                <!-- Release Date -->
                                @if (!string.IsNullOrEmpty(Model.ReleaseDate))
                                {
                                    <div class="col-md-4 mb-3">
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-calendar me-2 text-primary"></i>
                                            <div>
                                                <small class="text-muted d-block">Release Date</small>
                                                <span>@Model.ReleaseDate</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Author Panel -->
                <div id="author-panel" class="tab-panel">
                    <div class="card mb-4 shadow-sm">
                        <div class="card-header bg-white">
                            <h5 class="mb-0"><i class="fas fa-user me-2 text-primary"></i>Sobre el autor</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <!-- Author text content -->
                                <div id="author-text-container" class="col-12">
                                    <!-- Author biography -->
                                    <h5 class="mb-3">Biografía</h5>
                                    <p id="author-bio" class="@(string.IsNullOrEmpty(Model.AuthorBio) ? "text-muted fst-italic" : "")">
                                        @if (!string.IsNullOrEmpty(Model.AuthorBio))
                                        {
                                            @Model.AuthorBio
                                        }
                                        else
                                        {
                                            <text>No hay información biográfica disponible para este autor.</text>
                                        }
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Reviews Panel -->
                <div id="reviews-panel" class="tab-panel">
                    <!-- Review form partial -->
                    @await Html.PartialAsync("_ReviewForm", Model)

                    <!-- Reviews list partial -->
                    @await Html.PartialAsync("_ReviewsList", reviews)
                </div>
            </div>
        </div>
    </div>
</div>

<!-- New Library Modal -->
@if (User.Identity.IsAuthenticated)
{
    <div class="modal fade" id="newLibraryModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Library</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="library-name" class="form-label">Library Name</label>
                        <input type="text" id="library-name" class="form-control" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="create-library-btn" class="btn btn-primary">Create Library</button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Library creation with AJAX
            const createLibraryBtn = document.getElementById('create-library-btn');
            if (createLibraryBtn) {
                createLibraryBtn.addEventListener('click', function() {
                    const libraryName = document.getElementById('library-name').value;
                    if (!libraryName) {
                        alert('Please enter a library name');
                        return;
                    }

                    // Get the CSRF token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    // Create the request
                    fetch('/Libraries/CreateAndAddBook', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({
                            libraryName: libraryName,
                            bookId: @Model.IdBook
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // Close the modal
                            const modal = bootstrap.Modal.getInstance(document.getElementById('newLibraryModal'));
                            modal.hide();

                            // Show success message
                            alert(data.message || 'Book added to new library successfully');

                            // Refresh the page to show the new library
                            window.location.reload();
                        } else {
                            alert(data.message || 'Failed to create library');
                        }
                    })
                    .catch(error => {
                        console.error('Error creating library:', error);
                        alert('An error occurred while creating the library');
                    });
                });
            }

            // Tab functionality
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabPanels = document.querySelectorAll('.tab-panel');

            tabButtons.forEach(button => {
                button.addEventListener('click', function() {
                    // Remove active class from all buttons and panels
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabPanels.forEach(panel => panel.classList.remove('active'));

                    // Add active class to clicked button
                    this.classList.add('active');

                    // Show corresponding panel
                    const targetPanel = document.getElementById(this.dataset.target);
                    if (targetPanel) {
                        targetPanel.classList.add('active');
                    }

                    // Update URL hash for better linking
                    const target = this.dataset.target.replace('-panel', '');
                    if (target !== 'overview') {
                        history.replaceState(null, null, `#${target}`);
                    } else {
                        history.replaceState(null, null, window.location.pathname);
                    }
                });
            });

            // Check if we need to activate a specific tab from URL hash
            if (window.location.hash) {
                const hash = window.location.hash.substring(1);
                const targetTab = document.querySelector(`.tab-button[data-target="${hash}-panel"]`);
                if (targetTab) {
                    targetTab.click();
                } else if (hash === 'reviews') {
                    // Legacy support for #reviews
                    const reviewsTab = document.querySelector('.tab-button[data-target="reviews-panel"]');
                    if (reviewsTab) {
                        reviewsTab.click();
                    }
                } else if (hash === 'author') {
                    // Support for #author
                    const authorTab = document.querySelector('.tab-button[data-target="author-panel"]');
                    if (authorTab) {
                        authorTab.click();
                    }
                }
            }

            // Load additional author information if not present
            if (!document.querySelector('#author-info-loaded')) {
                fetchAdditionalAuthorInfo();
            }
        });

        // Share book function
        function shareBook(bookId, bookTitle) {
            const url = window.location.origin + '/Books/ViewDetails/' + bookId;
            const text = 'Check out this book: ' + bookTitle;

            if (navigator.share) {
                navigator.share({
                    title: bookTitle,
                    text: text,
                    url: url,
                })
                .catch(console.error);
            } else {
                // Fallback for browsers that don't support the Web Share API
                prompt('Copy this link to share:', url);
            }
        }

        // Function to fetch additional author information from Google Books API
        async function fetchAdditionalAuthorInfo() {
            const authorName = '@Model.Author';

            // Only fetch if we don't already have complete information
            const shouldFetch = '@(string.IsNullOrEmpty(Model.AuthorBio))' === 'True';

            if (!shouldFetch || !authorName) return;

            try {
                // Create a marker to prevent duplicate fetches
                marker.id = 'author-info-loaded';
                marker.style.display = 'none';
                document.body.appendChild(marker);

                // Try to get author info from Google Books
                const authorQuery = `inauthor:${encodeURIComponent(authorName)}`;
                const authorUrl = `https://www.googleapis.com/books/v1/volumes?q=${authorQuery}&maxResults=10`;

                const response = await fetch(authorUrl);
                const data = await response.json();

                if (data.items && data.items.length > 0) {
                    // Look for author bio only
                    let authorBio = '';

                    // Look through items for author info
                    data.items.forEach(item => {
                        const info = item.volumeInfo;

                        // Skip the current book
                        if (info.title === '@Model.Title') return;

                        // Try to find author info
                        if (!authorBio && info.description && info.description.includes(authorName)) {
                            // Extract potential bio from description that mentions the author
                            const sentences = info.description.split(/\. |\.|\!|\?/);
                            for (const sentence of sentences) {
                                if (sentence.includes(authorName)) {
                                    authorBio = sentence.trim() + '.';
                                    break;
                                }
                            }
                        }
                    });

                    // Update the UI with the information we found
                    const biographyElement = document.querySelector('#author-bio');
                    if (biographyElement && authorBio && !biographyElement.textContent.trim()) {
                        biographyElement.textContent = authorBio;
                        biographyElement.classList.remove('text-muted', 'fst-italic');
                    }
                }
            } catch (error) {
                console.error('Error fetching author details:', error);
                // We don't show an error to the user since this is supplementary information
            }
        }
    </script>
}